
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server_names_hash_bucket_size 64;

    # yasu
    server {
        # TODO: REPLACE THE IP WITH YOUR OWN PREFERENCE.
        listen 10.128.43.114:80;
        listen 10.128.43.114:443 ssl;

        # TODO: REPLACE IT WITH YOUR OWN PREFERENCE.
        server_name *.proxy.local;
        ssl_certificate cert/server.cer;
        ssl_certificate_key cert/server.key;

        # TODO: REPLACE IT WITH YOUR LOCAL SETUP.
        root "E:\Stash\~brayden.li\yasu\src";
        index index.html;

        if ($host ~* ^(.*)\.(proxy.local)$) {
            set $server $1;
        }

        location = /login/secure.ashx {
            try_files $uri @proxy_hostbinding;
        }

        location ~* /services/api/mobile/service {
            try_files $uri @proxy_hostbinding;
        }

        location / {
            try_files $uri @proxy_default;
        }

        # Solution_1
        # Pro: simple.
        # Con: doesn't work with request which use Host for further validation or request.
        location @proxy_default {
            # 'resolver' is requried when variable is being used.
            resolver 10.128.34.91 10.128.34.92;
            proxy_pass $scheme://$server;

            proxy_set_header Host $host;
            proxy_set_header Origin $scheme://$host;
            proxy_set_header Referer $scheme://$host$request_uri;

            proxy_connect_timeout 120s;
        }

        # Solution_2
        # Pro: flexibility
        # Con: have to replace all headers in response with $proxy_host besides request headers, if the host/domain matters.
        location @proxy_hostbinding {
            # 'resolver' is requried when variable is being used.
            resolver 10.128.34.91 10.128.34.92;
            proxy_pass $scheme://$server;

            proxy_set_header Host $proxy_host;
            proxy_set_header Origin $scheme://$proxy_host;
            proxy_set_header Referer $scheme://$proxy_host$request_uri;

            # TODO: 
            # Replace host in Access-Control-Allow-Origin.

            proxy_cookie_domain ~(([a-z0-9\-\.]+)[a-z0-9\-]+\.[a-z]+)$ $1.proxy.local;

            proxy_connect_timeout 120s;
        }
    }

    # server {
    #     listen       80;
    #     server_name  localhost;

    #     #charset koi8-r;

    #     #access_log  logs/host.access.log  main;

    #     location / {
    #         root   html;
    #         index  index.html index.htm;
    #     }

    #     #error_page  404              /404.html;

    #     # redirect server error pages to the static page /50x.html
    #     #
    #     error_page   500 502 503 504  /50x.html;
    #     location = /50x.html {
    #         root   html;
    #     }

    #     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #     #
    #     #location ~ \.php$ {
    #     #    proxy_pass   http://127.0.0.1;
    #     #}

    #     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #     #
    #     #location ~ \.php$ {
    #     #    root           html;
    #     #    fastcgi_pass   127.0.0.1:9000;
    #     #    fastcgi_index  index.php;
    #     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #     #    include        fastcgi_params;
    #     #}

    #     # deny access to .htaccess files, if Apache's document root
    #     # concurs with nginx's one
    #     #
    #     #location ~ /\.ht {
    #     #    deny  all;
    #     #}
    # }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
